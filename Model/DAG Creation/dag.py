# -*- coding: utf-8 -*-
"""DAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q8tQr3qYr2jcqsoC4sW33rrPc6NX00lR
"""

import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

data1 = pd.read_csv('/content/sensor_data_nRF_IMU_1_19092025_164551_not_labelled.csv')
data2 = pd.read_csv('/content/sensor_data_nRF_IMU_2_19092025_164551_labelled.csv')

data1.head()

data2.head()

data2 = data2.drop('Unnamed: 11', axis=1)
data2.head()

data2.dropna(inplace=True)
data2.head()

data = pd.merge(data1, data2, on=['TimeStamp'])
data.head()

data.info()

data['TimeStamp'] = pd.to_datetime(data['TimeStamp'])
data['delta_t'] = data['TimeStamp'].diff()
data['delta_t'] = data['delta_t'].dt.total_seconds().fillna(0)

data.sample(10)

G = nx.DiGraph()
nodes = list(range(1, 13))
G.add_nodes_from(nodes)
edge_weights = {}

for i in range(1, 12):
    mask = (data['Position'] == i)
    next_pose_indices = data.index[data['Position'] == i + 1].tolist()

    delta_ts = []
    for idx in next_pose_indices:
        prev_idx = idx - 1
        if prev_idx in data.index and data.loc[prev_idx, 'Position'] == i:
            delta_ts.append(data.loc[idx, 'delta_t'])

    if delta_ts:
        avg_weight = sum(delta_ts) / len(delta_ts)
    else:
        avg_weight = 0

    edge_weights[(i, i+1)] = avg_weight
    G.add_edge(i, i+1, weight=avg_weight)

pos = {i: (i, 0) for i in range(1, 13)}

plt.figure(figsize=(12, 3))

nx.draw_networkx_nodes(G, pos, node_size=700, node_color='red')

nx.draw_networkx_labels(G, pos, font_size=14, font_weight='bold')

nx.draw_networkx_edges(G, pos, edge_color='black', width=4, arrowsize=20)

edge_labels = {(u, v): f"{d['weight']:.2f}s" for u, v, d in G.edges(data=True)}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, label_pos=0.5,
                             font_color='blue', font_size=7, rotate=False, font_weight='bold')

plt.title("Surya Namaskar Pose Sequence Graph with Weighted Edges")
plt.tight_layout()
plt.show()